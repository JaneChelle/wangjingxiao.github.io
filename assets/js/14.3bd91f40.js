(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{206:function(s,a,t){"use strict";t.r(a);var e=t(0),n=Object(e.a)({},function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"git常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令","aria-hidden":"true"}},[s._v("#")]),s._v(" Git常用命令")]),s._v(" "),t("h3",{attrs:{id:"创建版本库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建版本库","aria-hidden":"true"}},[s._v("#")]),s._v(" 创建版本库")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#把这个目录变成Git可以管理的仓库\ngit init\n#把文件添加到仓库\ngit add readme.txt\n#把文件提交到仓库\ngit commit -m "wrote a readme file"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"时光穿梭机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时光穿梭机","aria-hidden":"true"}},[s._v("#")]),s._v(" 时光穿梭机")]),s._v(" "),t("h4",{attrs:{id:"版本回退"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#版本回退","aria-hidden":"true"}},[s._v("#")]),s._v(" 版本回退")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#查看历史记录\ngit log\n#查询版本号\ngit log --pretty=oneline\n#回退到上个版本，上上一个版本就是HEAD^^\ngit reset --hard HEAD^\n#回退到指定版本号的版本\ngit reset --hard 1094a\n#查询你的每一次命令，并且可以看到版本号\ngit reflog\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h4",{attrs:{id:"撤销修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改","aria-hidden":"true"}},[s._v("#")]),s._v(" 撤销修改")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#撤销修改\ngit checkout -- readme.txt\n#撤销已经add到暂存区的文件，再使用checkout即可撤销修改\ngit reset HEAD readme.txt\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h4",{attrs:{id:"删除文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除文件","aria-hidden":"true"}},[s._v("#")]),s._v(" 删除文件")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#删除一个文件\ngit rm test.txt\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"远程仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库","aria-hidden":"true"}},[s._v("#")]),s._v(" 远程仓库")]),s._v(" "),t("h4",{attrs:{id:"添加远程库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加远程库","aria-hidden":"true"}},[s._v("#")]),s._v(" 添加远程库")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#已有的本地仓库与远程仓库关联\ngit remote add origin git@github.com:账户名/仓库名.git\n#将本地库的所有内容推送到远程库\n#由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\ngit push -u origin master\n#之后就可以直接通过以下命令推送\ngit push origin master\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h4",{attrs:{id:"克隆仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#克隆仓库","aria-hidden":"true"}},[s._v("#")]),s._v(" 克隆仓库")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#克隆一个仓库\ngit clone 仓库地址\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"分支管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支管理","aria-hidden":"true"}},[s._v("#")]),s._v(" 分支管理")]),s._v(" "),t("h4",{attrs:{id:"创建和合并分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建和合并分支","aria-hidden":"true"}},[s._v("#")]),s._v(" 创建和合并分支")]),s._v(" "),t("p",[s._v("下面要完成的是创建一个新的分支，在新的分支下完成提交，然后再将新的分支合并到master分支。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#创建并切换一个dev分支\ngit checkout -b dev\n#git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：\ngit branch dev\ngit checkout dev\n#查看当前分支\ngit branch\n#之后完成提交，切换回master分支，然后把dev分支的工作成果合并到master分支上\ngit merge dev\n#删除分支\ngit branch -d dev\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h4",{attrs:{id:"解决冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突","aria-hidden":"true"}},[s._v("#")]),s._v(" 解决冲突")]),s._v(" "),t("p",[s._v("当两个分支都有提交内容时，合并就会冲突，修改冲突以后，再次提交")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#通过以下命令看到分支的合并情况\ngit log --graph --pretty=oneline --abbrev-commit\n#以下命令可以看到分支合并图\ngit log --graph\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h4",{attrs:{id:"分支管理策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支管理策略","aria-hidden":"true"}},[s._v("#")]),s._v(" 分支管理策略")]),s._v(" "),t("p",[s._v("通常，合并分支时，如果可能，Git会用"),t("code",[s._v("Fast forward")]),s._v("模式，但这种模式下，删除分支后，会丢掉分支信息。")]),s._v(" "),t("p",[s._v("如果要强制禁用"),t("code",[s._v("Fast forward")]),s._v("模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。\ngit merge --no-ff -m "merge with no-ff" dev\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"bug分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bug分支","aria-hidden":"true"}},[s._v("#")]),s._v(" Bug分支")]),s._v(" "),t("p",[s._v("当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支"),t("code",[s._v("issue-101")]),s._v("来修复它，但是，当前正在"),t("code",[s._v("dev")]),s._v("上进行的工作还没有提交，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#将当前分支隐藏\ngit stash\n#找到dev的工作现场\ngit stash list\n#有两个办法：一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除\ngit stash apply\ngit stash drop\n#另一种方式是用git stash pop，恢复的同时把stash内容也删了\ngit stash pop\n#再用git stash list查看，就看不到任何stash内容了\n#你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：\ngit stash apply stash@{0}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h4",{attrs:{id:"feature分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#feature分支","aria-hidden":"true"}},[s._v("#")]),s._v(" Feature分支")]),s._v(" "),t("p",[s._v("每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。")]),s._v(" "),t("p",[s._v("创建分支，提交，返回主分支合并。当新功能不需要时，强制删除使用-D：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#强制删除分支feature-vulcan\ngit branch -D feature-vulcan\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"多人协作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多人协作","aria-hidden":"true"}},[s._v("#")]),s._v(" 多人协作")]),s._v(" "),t("p",[s._v("查看远程库的信息，会显示可以抓取和推送的"),t("code",[s._v("origin")]),s._v("的地址。如果没有推送权限，就看不到push的地址。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#查看远程库的信息\ngit remote\n#显示更详细的信息\ngit remote -v\n#推送分支\ngit push origin master\n#要推送其他分支，比如dev\ngit push origin dev\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("master")]),s._v("分支是主分支，因此要时刻与远程同步；")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("dev")]),s._v("分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；")])]),s._v(" "),t("li",[t("p",[s._v("bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；")])]),s._v(" "),t("li",[t("p",[s._v("feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。")])])]),s._v(" "),t("p",[s._v("当dev分支冲突时，先用"),t("code",[s._v("git pull")]),s._v("把最新的提交从"),t("code",[s._v("origin/dev")]),s._v("抓下来，然后，在本地合并，解决冲突，再推送：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("git pull\n#git pull失败原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接\ngit branch --set-upstream-to=origin/dev dev\ngit pull\n#修改冲突后再次提交\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("多人协作的工作模式通常是这样：")]),s._v(" "),t("ol",[t("li",[s._v("首先，可以试图用"),t("code",[s._v("git push origin <branch-name>")]),s._v("推送自己的修改；")]),s._v(" "),t("li",[s._v("如果推送失败，则因为远程分支比你的本地更新，需要先用"),t("code",[s._v("git pull")]),s._v("试图合并；")]),s._v(" "),t("li",[s._v("如果合并有冲突，则解决冲突，并在本地提交；")]),s._v(" "),t("li",[s._v("没有冲突或者解决掉冲突后，再用"),t("code",[s._v("git push origin <branch-name>")]),s._v("推送就能成功！")])]),s._v(" "),t("p",[s._v("如果"),t("code",[s._v("git pull")]),s._v("提示"),t("code",[s._v("no tracking information")]),s._v("，则说明本地分支和远程分支的链接关系没有创建，用命令"),t("code",[s._v("git branch --set-upstream-to <branch-name> origin/<branch-name>")]),s._v("。")]),s._v(" "),t("h5",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("查看远程库信息，使用"),t("code",[s._v("git remote -v")]),s._v("；")])]),s._v(" "),t("li",[t("p",[s._v("本地新建的分支如果不推送到远程，对其他人就是不可见的；")])]),s._v(" "),t("li",[t("p",[s._v("从本地推送分支，使用"),t("code",[s._v("git push origin branch-name")]),s._v("，如果推送失败，先用"),t("code",[s._v("git pull")]),s._v("抓取远程的新提交；")])]),s._v(" "),t("li",[t("p",[s._v("在本地创建和远程分支对应的分支，使用"),t("code",[s._v("git checkout -b branch-name origin/branch-name")]),s._v("，本地和远程分支的名称最好一致；")])]),s._v(" "),t("li",[t("p",[s._v("建立本地分支和远程分支的关联，使用"),t("code",[s._v("git branch --set-upstream branch-name origin/branch-name")]),s._v("；（"),t("code",[s._v("git branch --set-upstream-to=origin/branch-name branch-name")]),s._v("）")])]),s._v(" "),t("li",[t("p",[s._v("从远程抓取分支，使用"),t("code",[s._v("git pull")]),s._v("，如果有冲突，要先处理冲突。")])])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。再使用git log --graph --pretty=oneline --abbrev-commit查看提交历史，会发现Git把我们本地的提交“挪动”了位置。\ngit rebase\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"标签管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标签管理","aria-hidden":"true"}},[s._v("#")]),s._v(" 标签管理")]),s._v(" "),t("h4",{attrs:{id:"创建标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建标签","aria-hidden":"true"}},[s._v("#")]),s._v(" 创建标签")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#给当前分支打一个新标签\ngit tag v1.0\n#查看所有标签\ngit tag\n#给某个提交加上标签\ngit tag v0.9 f52c633\n#标签不按顺序，查看标签信息\ngit show v0.9\n#创建带有说明的标签\ngit tag -a v0.1 -m "version 0.1 released" 1094adb\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h4",{attrs:{id:"操作标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作标签","aria-hidden":"true"}},[s._v("#")]),s._v(" 操作标签")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#如果标签打错了，也可以删除\ngit tag -d v0.1\n#要推送某个标签到远程\ngit push origin v1.0\n#一次性推送全部尚未推送到远程的本地标签\ngit push origin --tags\n#标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除\ngit tag -d v0.9\n#然后，从远程删除\ngit push origin :refs/tags/v0.9\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h3",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他","aria-hidden":"true"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),t("h4",{attrs:{id:"参与一个开源项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参与一个开源项目","aria-hidden":"true"}},[s._v("#")]),s._v(" 参与一个开源项目")]),s._v(" "),t("p",[s._v("如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页"),t("a",{attrs:{href:"https://github.com/twbs/bootstrap",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/twbs/bootstrap"),t("OutboundLink")],1),s._v("，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone。")]),s._v(" "),t("p",[s._v("如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。")]),s._v(" "),t("p",[s._v("如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。")]),s._v(" "),t("h4",{attrs:{id:"本地关联多个远程库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地关联多个远程库","aria-hidden":"true"}},[s._v("#")]),s._v(" 本地关联多个远程库")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#先删除已关联的名为origin的远程库\ngit remote rm origin\n#然后，先关联GitHub的远程库\ngit remote add github git@github.com:michaelliao/learngit.git\n#接着，再关联码云的远程库\ngit remote add gitee git@gitee.com:liaoxuefeng/learngit.git\n#查看远程库信息\ngit remote -v\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h4",{attrs:{id:"自定义git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义git","aria-hidden":"true"}},[s._v("#")]),s._v(" 自定义Git")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#让Git显示颜色，会让命令输出看起来更醒目\ngit config --global color.ui true\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h5",{attrs:{id:"忽略特殊文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#忽略特殊文件","aria-hidden":"true"}},[s._v("#")]),s._v(" 忽略特殊文件")]),s._v(" "),t("p",[s._v("不需要从头写"),t("code",[s._v(".gitignore")]),s._v("文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览："),t("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/github/gitignore"),t("OutboundLink")],1)]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了\ngit add App.class\n#如果你确实想添加该文件，可以用-f强制添加到Git\ngit add -f App.class\n#或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查\ngit check-ignore -v App.class\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h5",{attrs:{id:"配置别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置别名","aria-hidden":"true"}},[s._v("#")]),s._v(" 配置别名")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#只需要敲一行命令，告诉Git，以后st就表示status\ngit config --global alias.st status\n#比如\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\n#还可以把几个单词用指定字母代替\ngit config --global alias.unstage 'reset HEAD'\n#配置一个git last，让其显示最后一次提交信息，用git last就能显示最近一次的提交\ngit config --global alias.last 'log -1'\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h5",{attrs:{id:"搭建git服务器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搭建git服务器","aria-hidden":"true"}},[s._v("#")]),s._v(" 搭建Git服务器")]),s._v(" "),t("p",[s._v("推荐用Ubuntu或Debian，这样，通过几条简单的"),t("code",[s._v("apt")]),s._v("命令就可以完成安装。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#第一步，安装git：\nsudo apt-get install git\n\n#第二步，创建一个git用户，用来运行git服务：\nsudo adduser git\n\n#第三步，创建证书登录：\n#收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。\n\n#第四步，初始化Git仓库：\n#先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：\nsudo git init --bare sample.git\n#Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：\nsudo chown -R git:git sample.git\n\n#第五步，禁用shell登录：\n#出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：\ngit:x:1001:1001:,,,:/home/git:/bin/bash\n#改为：\ngit:x:1001:1001:,,,:/home/git:/usr/bin/git-shell\n#这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。\n\n#第六步，克隆远程仓库：\n#现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：\ngit clone git@server:/srv/sample.git\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])])])},[],!1,null,null,null);a.default=n.exports}}]);